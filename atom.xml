<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog of home</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.shichanson.site/"/>
  <updated>2020-09-20T12:25:23.000Z</updated>
  <id>https://blog.shichanson.site/</id>
  
  <author>
    <name>Chanson Shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何快速初始化 MacOS 开发环境</title>
    <link href="https://blog.shichanson.site/2020/09/20/macos-init-env/"/>
    <id>https://blog.shichanson.site/2020/09/20/macos-init-env/</id>
    <published>2020-09-20T12:25:23.000Z</published>
    <updated>2020-09-20T12:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多开发者比较喜欢用MacBook作为生产力工具，对于新电脑可以快速配置下开发环境。</p><a id="more"></a><h1 id="macos-开发者初始化工具"><a class="markdownIt-Anchor" href="#macos-开发者初始化工具"></a> MacOS 开发者初始化工具</h1><p><strong>打开以及关闭隐藏目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shift</span> + <span class="built_in">command</span> + .</span><br></pre></td></tr></table></figure><p><strong>安装开发工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p><strong>brew 工具使用</strong></p><ol><li>安装brew工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span> </span><br></pre></td></tr></table></figure><ol start="2"><li>brew 基本命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">brew -h <span class="comment">#查找命令</span></span><br><span class="line">brew search <span class="comment">#搜索软件</span></span><br><span class="line">brew install <span class="comment">#安装软件</span></span><br><span class="line">brew uninstall <span class="comment">#卸载软件</span></span><br><span class="line">brew update <span class="comment">#更新所有软件</span></span><br><span class="line">brew upgrade <span class="comment">#更新具体软件</span></span><br><span class="line">brew list <span class="comment">#显示安装软件</span></span><br><span class="line">brew info / home<span class="comment"># 查看软件信息：（home是打开软件的官网）</span></span><br><span class="line">brew outdated <span class="comment">#查看哪些软件需要更新</span></span><br></pre></td></tr></table></figure><p><strong>oh my zsh 安装以及配置插件</strong></p><ol><li>安装oh my zsh</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>安装autojump插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure><ol start="3"><li>安装zsh-autosuggestion插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions </span><br></pre></td></tr></table></figure><ol start="4"><li>安装zsh-syntax-highlighting插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><ol start="5"><li>配置以及激活插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc <span class="comment"># 添加选项</span></span><br><span class="line">plugins=(git autojump zsh-autosuggestions zsh-syntax-highlighting)  <span class="comment"># 重启控制台</span></span><br></pre></td></tr></table></figure><p><strong>oh my zsh 配置 powerlevel10k 主题</strong></p><ol><li>安装 powerlevel10k</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置方式 Set ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot; in ~/.zshrc.</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置powerlevel10k</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p10k configure <span class="comment"># 通过交互配置主题</span></span><br></pre></td></tr></table></figure><p><strong>MacOS Hight Sierra清除DNS缓存</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder;</span><br></pre></td></tr></table></figure><p><strong>安装常用软件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">brew cask install v2rayu</span><br><span class="line">brew cask install shadowsocksx-ng</span><br><span class="line">brew install redis</span><br><span class="line">brew install helm</span><br><span class="line">brew install kubernetes-cli</span><br><span class="line">brew install mysql</span><br><span class="line">brew cask install visual-studio-code</span><br><span class="line">brew cask install typora</span><br><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多开发者比较喜欢用MacBook作为生产力工具，对于新电脑可以快速配置下开发环境。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://blog.shichanson.site/categories/Tools/"/>
    
    
      <category term="tools" scheme="https://blog.shichanson.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>VMware Workstation Pro 16 内置容器工具vctl彻底替换docker（内含批量激活密钥）</title>
    <link href="https://blog.shichanson.site/2020/09/16/vmwareworkstation_16_pro_license/"/>
    <id>https://blog.shichanson.site/2020/09/16/vmwareworkstation_16_pro_license/</id>
    <published>2020-09-16T12:25:23.000Z</published>
    <updated>2020-09-16T12:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章为您介绍VMware本月刚发布的新版本PC桌面虚拟化软件VMware Workstation 16 Pro的容器新特性。</p><a id="more"></a><h2 id="新特性有哪些"><a class="markdownIt-Anchor" href="#新特性有哪些"></a> 新特性有哪些？</h2><ul><li><p>支持容器和kubernetes</p><ul><li>通过vctl命令行工具build、run、pull、push 管理容器镜像</li><li>支持通过KIND工具部署的kubernetes集群运行在workstation上。</li></ul><p><strong>注意：</strong> 要求Windows10 1809版本或者更高</p></li><li><p>虚拟机支持新的操作系统版本</p><ul><li>RHEL 8.2</li><li>Debian 10.5</li><li>Fedora 32</li><li>CentOS 8.2</li><li>SLE 15 SP2 GA</li><li>FreeBSD 11.4</li><li>ESXi 7.0</li></ul></li></ul><p>等等新特性。</p><h2 id="vmware-新出的容器工具-vctl"><a class="markdownIt-Anchor" href="#vmware-新出的容器工具-vctl"></a> VMware 新出的容器工具 vctl</h2><h3 id="使用说明"><a class="markdownIt-Anchor" href="#使用说明"></a> 使用说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">vctl - A CLI tool <span class="keyword">for</span> the container engine powered by VMware Workstation</span><br><span class="line">vctl Highlights:</span><br><span class="line">• Build and run OCI containers.</span><br><span class="line">• Push and pull container images between remote registries &amp; <span class="built_in">local</span> storage.</span><br><span class="line">• Use a lightweight virtual machine (CRX VM) based on VMware Photon OS to host a container. Use <span class="string">&#x27;vctl system config -h&#x27;</span> to learn more.</span><br><span class="line">• Easy shell access into virtual machine that hosts container. See <span class="string">&#x27;vctl execvm’.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">USAGE:</span></span><br><span class="line"><span class="string">  vctl COMMAND [OPTIONS]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">COMMANDS:</span></span><br><span class="line"><span class="string">  build                        Build a container image from a Dockerfile.</span></span><br><span class="line"><span class="string">  create                       Create a new container from a container image.</span></span><br><span class="line"><span class="string">  describe                     Show details of a container.</span></span><br><span class="line"><span class="string">  exec                         Execute a command within a running container.</span></span><br><span class="line"><span class="string">  execvm                       Execute a command within a running virtual machine that hosts container.</span></span><br><span class="line"><span class="string">  help                         Help about any command.</span></span><br><span class="line"><span class="string">  images                       List container images.</span></span><br><span class="line"><span class="string">  inspect                      Return low-level information on objects.</span></span><br><span class="line"><span class="string">  kind                         Get system environment ready for vctl-based KIND.</span></span><br><span class="line"><span class="string">  login                        Log in to a registry.</span></span><br><span class="line"><span class="string">  logout                       Log out from a registry.</span></span><br><span class="line"><span class="string">  ps                           List containers.</span></span><br><span class="line"><span class="string">  pull                         Pull a container image from a registry.</span></span><br><span class="line"><span class="string">  push                         Push a container image to a registry.</span></span><br><span class="line"><span class="string">  rm                           Remove one or more containers.</span></span><br><span class="line"><span class="string">  rmi                          Remove one or more container images.</span></span><br><span class="line"><span class="string">  run                          Run a new container from a container image.</span></span><br><span class="line"><span class="string">  start                        Start an existing container.</span></span><br><span class="line"><span class="string">  stop                         Stop a container.</span></span><br><span class="line"><span class="string">  system                       Manage the container engine.</span></span><br><span class="line"><span class="string">  tag                          Tag container images.</span></span><br><span class="line"><span class="string">  version                      Print the version of vctl.</span></span><br><span class="line"><span class="string">  volume                       Manage volumes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Run &#x27;</span>vctl COMMAND --<span class="built_in">help</span><span class="string">&#x27; for more information on a command.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OPTIONS:</span></span><br><span class="line"><span class="string">  -h, --help   Help for vctl</span></span><br></pre></td></tr></table></figure><h3 id="小试牛刀"><a class="markdownIt-Anchor" href="#小试牛刀"></a> 小试牛刀</h3><ol><li>启动vctl命令行工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vctl system start</span><br></pre></td></tr></table></figure><ol start="2"><li>基本用法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vctl.exe run -d  -p 80:80 --name nginx --restart unless-stopped daocloud.io/nginx <span class="comment">#创建容器</span></span><br><span class="line"></span><br><span class="line">vctl.exe ps <span class="comment"># 查看运行中的容器。</span></span><br><span class="line">────    ─────                      ───────                   ──               ─────       ──────    ─────────────</span><br><span class="line">NAME    IMAGE                      COMMAND                   IP               PORTS       STATUS    CREATION TIME</span><br><span class="line">────    ─────                      ───────                   ──               ─────       ──────    ─────────────</span><br><span class="line">nginx   daocloud.io/nginx:latest   /docker-entrypoint.s...   192.168.197.10   80:80/tcp   running   2020-09-17T22:28:44+08:00</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="容器与虚拟机网络融合"><a class="markdownIt-Anchor" href="#容器与虚拟机网络融合"></a> 容器与虚拟机网络融合</h3><p>通过上面vctl ps 命令查看到容器的IP其实是属于VMware Workstation 安装时自动创建的虚拟网络VMnet8子网下。是不是发现了什么？</p><p>对，就是容器和虚拟机之间的网络处于同一平面，虚拟机与容器在网络中地位同等。</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>笔者认为稳态和敏态两种类型应用将在未来企业架构中长期并存的，所以VMware这种将容器和虚拟化高度融合的方案是非常巧妙的，容器满足互联网化敏态应用的高速迭代场景，虚拟化兼顾需要稳态的数据库等中间件以及容器化成本过高的老旧系统场景。</p><h3 id="vmware-workstation-pro-16-许可证密钥批量永久激活"><a class="markdownIt-Anchor" href="#vmware-workstation-pro-16-许可证密钥批量永久激活"></a> VMware Workstation Pro 16 许可证密钥，批量永久激活</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZF3R0-FHED2-M80TY-8QYGC-NPKYF</span><br><span class="line">YF390-0HF8P-M81RQ-2DXQE-M2UT6</span><br><span class="line">ZF71R-DMX85-08DQY-8YMNC-PPHV8</span><br></pre></td></tr></table></figure><p>下载地址：</p><p><a href="https://n802.com/file/21152422-461565567">https://n802.com/file/21152422-461565567</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章为您介绍VMware本月刚发布的新版本PC桌面虚拟化软件VMware Workstation 16 Pro的容器新特性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ops" scheme="https://blog.shichanson.site/categories/Ops/"/>
    
    
      <category term="tools" scheme="https://blog.shichanson.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>基于阿里云OSS解决前端图片跨域的问题</title>
    <link href="https://blog.shichanson.site/2020/08/09/oss-crossdomain-ssl/"/>
    <id>https://blog.shichanson.site/2020/08/09/oss-crossdomain-ssl/</id>
    <published>2020-08-09T03:25:23.000Z</published>
    <updated>2020-08-09T03:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发前端应用通常将图片等一些资源存放在一些对象存储中比如，阿里云OSS、腾讯OSS等，在oss的基础加上CDN进行资源分发。这种场景下前端开发一般都会遇到跨域问题，该篇博客记录下解决过程。</p><a id="more"></a><ol><li><p>登录阿里云oss账号，创建bucket。</p></li><li><p>对bucket进行跨域设置，设置规则如下：</p></li></ol><p><img src="https://wx2.sbimg.cn/2020/08/09/ouJYe.png" alt="ouJYe.p" /></p><p>[<img src="https://wx1.sbimg.cn/2020/08/09/ouLFD.png" alt="ouLFD.png" />]</p><ol start="3"><li><p>针对OSS设置CDN，然后在dns中添加CNAME记录。</p></li><li><p>设置完毕以后，我们在开发中总是遇到报错。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mixed Content: The page at <span class="string">&#x27;https://www.mayershi.me/#/front/user/center&#x27;</span> was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint <span class="string">&#x27;http://as.test.com/file/20200802115932-deqw.png&#x27;</span>. This request has been blocked; the content must be served over HTTPS.</span><br></pre></td></tr></table></figure><p>同时浏览器还报“与此网站构建的连接不完全安全。”</p><ol start="4"><li>解决方案就是，将CDN所有的http请求强制转化成https.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发前端应用通常将图片等一些资源存放在一些对象存储中比如，阿里云OSS、腾讯OSS等，在oss的基础加上CDN进行资源分发。这种场景下前端开发一般都会遇到跨域问题，该篇博客记录下解决过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://blog.shichanson.site/categories/frontend/"/>
    
    
      <category term="前端跨域" scheme="https://blog.shichanson.site/tags/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>搭建免费科学上网服务器v2ray</title>
    <link href="https://blog.shichanson.site/2020/08/06/gcp-install-gfw-v2ray-server/"/>
    <id>https://blog.shichanson.site/2020/08/06/gcp-install-gfw-v2ray-server/</id>
    <published>2020-08-06T12:25:23.000Z</published>
    <updated>2020-08-06T12:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用gcp每个绑定信用卡会送300美元可以免费搭建一个v2ray的梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。</p><a id="more"></a><h2 id="安装步骤"><a class="markdownIt-Anchor" href="#安装步骤"></a> 安装步骤</h2><p>利用gcp每个绑定信用卡会送300美元可以免费搭建一个梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。</p><p>Google Cloud Platform： <a href="https://cloud.google.com/gcp">https://cloud.google.com/gcp</a><br />创建compute engine—虚拟机实例—创建实例—服务器选址（ 除非有特殊需求，区域一般选亚太-，香港、台湾速度比较快，但不是太稳定，我一般选日本。）<br />然后开始搭建梯子，软件比较多，SS，SSR，Trojan；但是现在主流还是V2Ray，用233boy大的一键脚本安装会比较简单，只有2行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><p>然后如果想选择WebSocket + TLS传输协议，还需要有一个域名。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用gcp每个绑定信用卡会送300美元可以免费搭建一个v2ray的梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ops" scheme="https://blog.shichanson.site/categories/Ops/"/>
    
    
      <category term="tools" scheme="https://blog.shichanson.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>基于Ubuntu安装ROS 系统（melodic版本）</title>
    <link href="https://blog.shichanson.site/2020/06/04/install-ros-melodic-ubuntu-18-04/"/>
    <id>https://blog.shichanson.site/2020/06/04/install-ros-melodic-ubuntu-18-04/</id>
    <published>2020-06-04T02:25:23.000Z</published>
    <updated>2020-06-04T02:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>ROS (Robot Operating System, 机器人操作系统) 提供一系列程序库和工具以帮助软件开发者创建机器人应用软件。它提供了硬件抽象、设备驱动、函数库、可视化工具、消息传递和软件包管理等诸多功能。</p><a id="more"></a><h2 id="安装版本要求"><a class="markdownIt-Anchor" href="#安装版本要求"></a> 安装版本要求：</h2><blockquote><ul><li>Ubuntu系统版本18.04 版本</li><li>ROS 版本为Melodic版本</li></ul></blockquote><h2 id="安装步骤"><a class="markdownIt-Anchor" href="#安装步骤"></a> 安装步骤</h2><ol><li>配置Ubuntu的repository源,编辑/etc/apt/sources.list文件。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><p>更新源以及更新系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt-get upgrade -y </span><br></pre></td></tr></table></figure><ol start="2"><li>配置ROS的Ubuntu源,</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ROS 镜像使用帮助</span><br><span class="line">新建 /etc/apt/sources.list.d/ros-latest.list，内容为：</span><br><span class="line"></span><br><span class="line">你的Debian/Ubuntu版本: </span><br><span class="line">Ubuntu 18.04 LTS</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ bionic main</span><br><span class="line">然后再输入如下命令，信任ROS的GPG Key，并更新索引：</span><br><span class="line"></span><br><span class="line">sudo apt-key adv --keyserver <span class="string">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><ol start="3"><li>开始安装ROS系统</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-desktop-full -y</span><br></pre></td></tr></table></figure><ol start="4"><li>ROS环境变量设置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt;  ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><ol start="5"><li>安装构建包依赖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure><ol start="6"><li>初始化rosdep工具，在使用许多ROS工具之前，您需要初始化rosdep。rosdep使您能够轻松地为要编译的源安装系统依赖性，并且是运行ROS中某些核心组件所必需的。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-rosdep</span><br><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure><ol start="7"><li>验证当前安装环境是否正确。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启一个终端执行如下命令</span></span><br><span class="line">ros@ubuntu:~$ roscore</span><br><span class="line">... logging to /home/mayershi/.ros/<span class="built_in">log</span>/51594486-a3d7-11ea-a495-001c425709d4/roslaunch-ubuntu-14528.log</span><br><span class="line">Checking <span class="built_in">log</span> directory <span class="keyword">for</span> disk usage. This may take a <span class="keyword">while</span>.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking <span class="built_in">log</span> file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://ubuntu:41953/</span><br><span class="line">ros_comm version 1.14.5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /rosdistro: melodic</span><br><span class="line"> * /rosversion: 1.14.5</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line"></span><br><span class="line">auto-starting new master</span><br><span class="line">process[master]: started with pid [14541]</span><br><span class="line">ROS_MASTER_URI=http://ubuntu:11311/</span><br><span class="line"></span><br><span class="line">setting /run_id to 51594486-a3d7-11ea-a495-001c425709d4</span><br><span class="line">process[rosout-1]: started with pid [14552]</span><br><span class="line">started core service [/rosout]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新开一个终端执行命令</span></span><br><span class="line">ros@ubuntu:~$ rosrun turtlesim turtlesim_node</span><br><span class="line"><span class="comment"># 会生产成一个小乌龟节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新开另外一个终端执行命令</span></span><br><span class="line">ros@ubuntu:~$ rosrun turtlesim turtle_teleop_key</span><br><span class="line"><span class="comment"># 在此终端上通过方向键来操控小乌龟移动。</span></span><br></pre></td></tr></table></figure><p>效果如图：<br /><img src="https://s1.ax1x.com/2020/06/04/twT9mj.png" alt="twT9mj.png" /></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ROS (Robot Operating System, 机器人操作系统) 提供一系列程序库和工具以帮助软件开发者创建机器人应用软件。它提供了硬件抽象、设备驱动、函数库、可视化工具、消息传递和软件包管理等诸多功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ROS" scheme="https://blog.shichanson.site/categories/ROS/"/>
    
    
      <category term="机器人" scheme="https://blog.shichanson.site/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>zoom 国际版视频会议软件屏蔽后解决办法</title>
    <link href="https://blog.shichanson.site/2019/12/26/zoom-not-connect/"/>
    <id>https://blog.shichanson.site/2019/12/26/zoom-not-connect/</id>
    <published>2019-12-26T03:11:46.000Z</published>
    <updated>2019-12-26T03:11:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间zoom视频会议软件由于视频数据没法留存在中国，导致zoom被墙掉了。但是可以通过一种方式解决。</p><a id="more"></a><h3 id="修改本地hosts文件"><a class="markdownIt-Anchor" href="#修改本地hosts文件"></a> 修改本地hosts文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br><span class="line"></span><br><span class="line">221.122.88.132   zoom.us</span><br><span class="line">52.202.62.203   zoom.us</span><br><span class="line">52.202.62.241   zoom.us</span><br><span class="line">52.202.62.241   share.zoom.us</span><br><span class="line">52.202.62.203   share.zoom.us</span><br><span class="line"></span><br><span class="line">104.16.51.111   support.zoom.us</span><br><span class="line">104.16.52.111   support.zoom.us</span><br><span class="line">104.16.53.111   support.zoom.us</span><br><span class="line">104.16.54.111   support.zoom.us</span><br><span class="line"></span><br><span class="line">221.122.88.132   www.zoom.us</span><br><span class="line">221.122.88.132   www3.zoom.us</span><br><span class="line">221.122.88.132   google.zoom.us</span><br><span class="line">221.122.88.132   facebook.zoom.us</span><br><span class="line">221.122.88.132   log.zoom.us</span><br><span class="line">221.122.88.132   api.zoom.us</span><br><span class="line">221.122.88.132   launcher.zoom.us</span><br><span class="line">221.122.88.132   imauth.zoom.us</span><br><span class="line">221.122.88.132   static.zoom.us</span><br><span class="line">221.122.89.232   file-ia.zoom.us</span><br><span class="line">221.122.89.180   xmpp001.zoom.us</span><br><span class="line">221.122.89.180   xmpp002.zoom.us</span><br><span class="line">221.122.89.180   xmpp003.zoom.us</span><br><span class="line">221.122.89.180   xmpp004.zoom.us</span><br><span class="line">221.122.89.180   xmpp005.zoom.us</span><br><span class="line">221.122.89.180   xmpp006.zoom.us</span><br><span class="line">221.122.89.180   xmpp007.zoom.us</span><br><span class="line">221.122.89.180   xmpp008.zoom.us</span><br><span class="line">221.122.89.180   xmpp009.zoom.us</span><br><span class="line">221.122.89.180   xmpp010.zoom.us</span><br><span class="line">221.122.89.180   xmpp011.zoom.us</span><br><span class="line">221.122.89.180   xmpp012.zoom.us</span><br><span class="line">221.122.89.180   xmpp013.zoom.us</span><br><span class="line">221.122.89.180   xmpp014.zoom.us</span><br><span class="line">221.122.89.180   xmpp015.zoom.us</span><br><span class="line">221.122.89.231   xmppapi.zoom.us</span><br></pre></td></tr></table></figure><h3 id="验证是否可以访问"><a class="markdownIt-Anchor" href="#验证是否可以访问"></a> 验证是否可以访问</h3><p>浏览器输入： <a href="https://zoom.us">https://zoom.us</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间zoom视频会议软件由于视频数据没法留存在中国，导致zoom被墙掉了。但是可以通过一种方式解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://blog.shichanson.site/categories/Tools/"/>
    
    
      <category term="zoom" scheme="https://blog.shichanson.site/tags/zoom/"/>
    
  </entry>
  
  <entry>
    <title>GitOps 云原生持续交付方式</title>
    <link href="https://blog.shichanson.site/2019/12/24/gitops-basic-concept/"/>
    <id>https://blog.shichanson.site/2019/12/24/gitops-basic-concept/</id>
    <published>2019-12-24T10:35:58.000Z</published>
    <updated>2019-12-24T10:35:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家比较熟知DevOps、AiOps概念，也听说过GitOps。但是GitOps究竟是个什么东西，可能不是太了解。所以本篇文章主要介绍GitOps的一些基础知识以及核心思想。</p><a id="more"></a><h2 id="什么是gitops"><a class="markdownIt-Anchor" href="#什么是gitops"></a> 什么是GitOps ？</h2><p>GitOps是一种进行Kubernetes集群管理和应用交付的方式。它通过将Git用作声明性基础结构和应用程序的单一事实来源来工作。将Git作为交付流水线的核心，每个开发人员都可以提交拉取请求（Pull Request）并使用Gi​​t来加速和简化Kubernetes的应用程序部署和运维任务。通过使用像Git这样的简单工具，开发人员可以更高效地将注意力集中在业务开发而不是运维相关任务上。</p><h2 id="gitops的主要优势"><a class="markdownIt-Anchor" href="#gitops的主要优势"></a> GitOps的主要优势</h2><p>当使用Git提交基础架构代码更改时，自动化的交付流水线会将这些更改应用到应用程序的实际基础架构上。但是GitOps的想法远不止于此——它还会使用工具将整个应用程序的实际生产状态与基础架构源代码进行比较，然后它会告诉集群哪些基础架构源代码与实际环境不匹配。</p><p>通过应用GitOps最佳实践，应用系统的基础架构和应用程序代码都有“真实来源”——其实是将基础架构和应用程序代码都存放在gitlab、或者github等版本控制系统上。这使开发团队可以提高开发和部署速度并提高应用系统可靠性。</p><p>将GitOps理论方法应用在持续交付流水线上，有诸多优势和特点：</p><ul><li>安全的云原生CI/CD pipeline 模型</li><li>更快的平均部署时间和平均恢复时间</li><li>稳定且可重现的回滚（例如，根据Git恢复/回滚/ fork）</li><li>与监控和可视化工具相结合，对已经部署的应用进行全方位的监控</li></ul><h2 id="运用gitops的基本前提"><a class="markdownIt-Anchor" href="#运用gitops的基本前提"></a> 运用GitOps的基本前提</h2><p>没有单一工具可以完成流水线中所需的所有工作，因此可以为流水线的不同部分选择最佳工具。但是多工具部件组合使用，使得所有部件粘合在一起变成了创建流水线最难的一部分。不管如何选择构造自己的交付流水线，将基于Git（或者其他版本控制工具）的GitOps最佳实践应用在交付流水线中都是一个不二选择，这将使构建持续交付流水线，以及后续的推广变得更加容易，这不仅从技术角度而且从文化角度来看都是如此。同时gitOps也不是银弹，发挥它的最大作用需要一些基本前提。</p><h3 id="不可变基础设施"><a class="markdownIt-Anchor" href="#不可变基础设施"></a> 不可变基础设施</h3><p>在容器尚未普及的时代，很多公司运维采用各种自动化框架做自己的运维平台来使得相同应用能在测试生产等环境安全稳定运行，但是长期运行后依旧会出现同一集群中的机器的环境不一致的问题，进而引发各种故障和问题的发生。容器技术通过将应用环境与应用打包成镜像使其变成一种不可变单元，进而实现了不可变基础设施。如何高效的使用不可变基础设施资源呢，这时候k8s的诞生解决了该问题。</p><h3 id="声明性容器编排"><a class="markdownIt-Anchor" href="#声明性容器编排"></a> 声明性容器编排</h3><p>Kubermetes作为一个云原生的工具，可以把它的“声明性”看作是“代码”，声明意味着配置由一组事实而不是一组指令组成，例如，“有十个redis服务器”，而不是“启动十个redis服务器，告诉我它是否有效”。借助Kubermetes的声明性特点，应用系统的整个配置文件集可以在Git库中进行版本控制。通过使用Git库，应用程序更容易部署到Kubernetes中，以及进行版本回滚。更重要的是，当灾难发生时，群集的基础架构可以从Git库中可靠且快速地恢复。</p><h2 id="gitops的基本原则"><a class="markdownIt-Anchor" href="#gitops的基本原则"></a> GitOps的基本原则</h2><p>以下是在云原生环境中GitOps的原则：</p><blockquote><ul><li>任何能够被描述的内容都必须存储在Git库中</li></ul></blockquote><p>通过使用Git作为存储声明性基础架构和应用程序代码的存储仓库，可以方便地监控集群，以及检查比较实际环境的状态与代码库上的状态是否一致。所以，我们的目标是描述系统相关的所有内容：策略，代码，配置，甚至监控事件和版本控制等，并且将这些内容全部存储在版本库中，在通过版本库中的内容构建系统的基础架构或者应用程序的时候，如果没有成功，则可以迅速的回滚，并且重新来过。</p><blockquote><ul><li>不应直接使用Kubectl</li></ul></blockquote><p>作为一般规则，不提倡在命令行中直接使用kubectl命令操作执行部署基础架构或应用程序到集群中。还有一些开发者使用CI工具驱动应用程序的部署，但如果这样做，可能会给生产环境带来潜在不可预测的风险。</p><blockquote><ul><li>调用Kubernetes 的API的接口或者控制器应该遵循 Operator 模式</li></ul></blockquote><p>调用Kubernetes 的API的接口或者控制器应该遵循 Operator 模式（什么是Operator 模式？），集群的状态和Git库中的配置文件等要保持一致，并且查看分析它们之间的状态差异。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家比较熟知DevOps、AiOps概念，也听说过GitOps。但是GitOps究竟是个什么东西，可能不是太了解。所以本篇文章主要介绍GitOps的一些基础知识以及核心思想。&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitOps" scheme="https://blog.shichanson.site/categories/GitOps/"/>
    
    
      <category term="gitops" scheme="https://blog.shichanson.site/tags/gitops/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ee 企业版自签许可证license</title>
    <link href="https://blog.shichanson.site/2019/12/23/crack-gitlab-ee-licence/"/>
    <id>https://blog.shichanson.site/2019/12/23/crack-gitlab-ee-licence/</id>
    <published>2019-12-23T03:27:40.000Z</published>
    <updated>2019-12-23T03:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要是研究gitlab-ee的licence签发方式，仅供大家学习参考使用。请尊重软件开发者成果，支持正版。</p><a id="more"></a><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><p>最近帮一个朋友推动开发测试一体化从DevOps转向GitOps。对于什么是GitOps，有时间搞个专题博客来讲讲这个概念以及最佳实践。总之在推进GitOps的时候需要，需要一些gitlab-ee 的高级特性。</p><h3 id="1-安装ruby环境以及gem包管理工具"><a class="markdownIt-Anchor" href="#1-安装ruby环境以及gem包管理工具"></a> 1. 安装ruby环境以及gem包管理工具</h3><ul><li><p>由于我的电脑是mbp,所以自带ruby开发环境,无需安装。</p></li><li><p>安装相关ruby包依赖<code>gitlab</code>、<code>gitlab-license</code>、<code>openssl</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install gitlab</span><br><span class="line">sudo gem install gitlab-license</span><br><span class="line">sudo gem install openssl</span><br></pre></td></tr></table></figure><h3 id="2-编写创建license的ruby脚本并生成license文件"><a class="markdownIt-Anchor" href="#2-编写创建license的ruby脚本并生成license文件"></a> 2. 编写创建license的ruby脚本，并生成license文件</h3><ul><li>创建脚本文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim createlicense.rb</span><br></pre></td></tr></table></figure><ul><li>文件内容如下</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;openssl&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;gitlab/license&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a key pair. You should do this only once.</span></span><br><span class="line">key_pair = OpenSSL::PKey::RSA.generate(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write it to a file to use in the license generation application.</span></span><br><span class="line">File.open(<span class="string">&quot;license_key&quot;</span>, <span class="string">&quot;w&quot;</span>) &#123; <span class="params">|f|</span> f.write(key_pair.to_pem) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract the public key.</span></span><br><span class="line">public_key = key_pair.public_key</span><br><span class="line"><span class="comment"># Write it to a file to ship along with the main application.</span></span><br><span class="line">File.open(<span class="string">&quot;license_key.pub&quot;</span>, <span class="string">&quot;w&quot;</span>) &#123; <span class="params">|f|</span> f.write(public_key.to_pem) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># In the license generation application, load the private key from a file.</span></span><br><span class="line">private_key = OpenSSL::PKey::RSA.new File.read(<span class="string">&quot;license_key&quot;</span>)</span><br><span class="line">Gitlab::License.encryption_key = private_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build a new license.</span></span><br><span class="line">license = Gitlab::License.new</span><br><span class="line"></span><br><span class="line"><span class="comment"># License information to be rendered as a table in the admin panel.</span></span><br><span class="line"><span class="comment"># E.g.: &quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span></span><br><span class="line"><span class="comment"># Specific keys don&#x27;t matter, but there needs to be at least one.</span></span><br><span class="line">license.licensee = &#123;</span><br><span class="line">  <span class="string">&quot;Name&quot;</span>    =&gt; <span class="string">&quot;tester&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Company&quot;</span> =&gt; <span class="string">&quot;Google Inc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Email&quot;</span>   =&gt; <span class="string">&quot;test@163.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The date the license starts. </span></span><br><span class="line"><span class="comment"># Required.</span></span><br><span class="line">license.starts_at         = Date.new(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">24</span>) <span class="comment"># license 开始生效时间</span></span><br><span class="line"><span class="comment"># The date the license expires. </span></span><br><span class="line"><span class="comment"># Not required, to allow lifetime licenses.</span></span><br><span class="line">license.expires_at        = Date.new(<span class="number">2026</span>, <span class="number">4</span>, <span class="number">23</span>) <span class="comment"># license 到期时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The below dates are hardcoded in the license so that you can play with the</span></span><br><span class="line"><span class="comment"># period after which there are &quot;repercussions&quot; to license expiration.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The date admins will be notified about the license&#x27;s pending expiration. </span></span><br><span class="line"><span class="comment"># Not required.</span></span><br><span class="line">license.notify_admins_at  = Date.new(<span class="number">2026</span>, <span class="number">3</span>, <span class="number">23</span>) <span class="comment"># license 管理员过期提醒时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The date regular users will be notified about the license&#x27;s pending expiration.</span></span><br><span class="line"><span class="comment"># Not required.</span></span><br><span class="line">license.notify_users_at   = Date.new(<span class="number">2026</span>, <span class="number">3</span>, <span class="number">23</span>) <span class="comment"># license 普通用户过期提醒时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The date &quot;changes&quot; like code pushes, issue or merge request creation </span></span><br><span class="line"><span class="comment"># or modification and project creation will be blocked.</span></span><br><span class="line"><span class="comment"># Not required.</span></span><br><span class="line">license.block_changes_at  = Date.new(<span class="number">2026</span>, <span class="number">5</span>, <span class="number">7</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Restrictions bundled with this license.</span></span><br><span class="line"><span class="comment"># Not required, to allow unlimited-user licenses for things like educational organizations.</span></span><br><span class="line">license.restrictions  = &#123;</span><br><span class="line">  <span class="comment"># The maximum allowed number of active users.</span></span><br><span class="line">  <span class="comment"># Not required.</span></span><br><span class="line">  <span class="symbol">active_user_count:</span> <span class="number">10000</span>  <span class="comment"># license 人数配额</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># We don&#x27;t currently have any other restrictions, but we might in the future.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;License:&quot;</span></span><br><span class="line">puts license</span><br><span class="line"></span><br><span class="line"><span class="comment"># Export the license, which encrypts and encodes it.</span></span><br><span class="line">data = license.export</span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;Exported license:&quot;</span></span><br><span class="line">puts data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the license to a file to send to a customer.</span></span><br><span class="line">File.open(<span class="string">&quot;GitLabBV.gitlab-license&quot;</span>, <span class="string">&quot;w&quot;</span>) &#123; <span class="params">|f|</span> f.write(data) &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># In the customer&#x27;s application, load the public key from a file.</span></span><br><span class="line">public_key = OpenSSL::PKey::RSA.new File.read(<span class="string">&quot;license_key.pub&quot;</span>)</span><br><span class="line">Gitlab::License.encryption_key = public_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read the license from a file.</span></span><br><span class="line">data = File.read(<span class="string">&quot;GitLabBV.gitlab-license&quot;</span>)  <span class="comment"># 生成license存储文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Import the license, which decodes and decrypts it.</span></span><br><span class="line">$license = Gitlab::License.import(data)</span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;Imported license:&quot;</span></span><br><span class="line">puts $license</span><br><span class="line"></span><br><span class="line"><span class="comment"># Quit if the license is invalid</span></span><br><span class="line"><span class="keyword">unless</span> $license</span><br><span class="line">  raise <span class="string">&quot;The license is invalid.&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Quit if the active user count exceeds the allowed amount:</span></span><br><span class="line"><span class="keyword">if</span> $license.restricted?(<span class="symbol">:active_user_count</span>)</span><br><span class="line">  active_user_count = <span class="number">1000</span></span><br><span class="line">  <span class="keyword">if</span> active_user_count &gt; $license.restrictions[<span class="symbol">:active_user_count</span>]</span><br><span class="line">    raise <span class="string">&quot;The active user count exceeds the allowed amount!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show admins a message if the license is about to expire.</span></span><br><span class="line"><span class="keyword">if</span> $license.notify_admins?</span><br><span class="line">  puts <span class="string">&quot;The license is due to expire on <span class="subst">#&#123;$license.expires_at&#125;</span>.&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show users a message if the license is about to expire.</span></span><br><span class="line"><span class="keyword">if</span> $license.notify_users?</span><br><span class="line">  puts <span class="string">&quot;The license is due to expire on <span class="subst">#&#123;$license.expires_at&#125;</span>.&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Block pushes when the license expired two weeks ago.</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Gitlab</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">GitAccess</span></span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(cmd, changes = <span class="literal">nil</span>)</span></span></span><br><span class="line">      <span class="keyword">if</span> $license.block_changes?</span><br><span class="line">        <span class="keyword">return</span> build_status_object(<span class="literal">false</span>, <span class="string">&quot;License expired&quot;</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Do other Git access verification</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show information about the license in the admin panel.</span></span><br><span class="line">puts <span class="string">&quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span></span><br><span class="line">$license.licensee.each <span class="keyword">do</span> <span class="params">|key, value|</span></span><br><span class="line">  puts <span class="string">&quot;<span class="subst">#&#123;key&#125;</span>: <span class="subst">#&#123;value&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> $license.expired?</span><br><span class="line">  puts <span class="string">&quot;The license expired on <span class="subst">#&#123;$license.expires_at&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">elsif</span> $license.will_expire?</span><br><span class="line">  puts <span class="string">&quot;The license will expire on <span class="subst">#&#123;$license.expires_at&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;The license will never expire.&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>执行以上license脚本文件，生成三个文件,</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">ruby createlicense.rb  <span class="comment"># 执行脚本生成如下内容</span></span><br><span class="line"></span><br><span class="line">License:</span><br><span class="line"><span class="comment">#&lt;Gitlab::License:0x00007fd08691eca0&gt;</span></span><br><span class="line">Exported license:</span><br><span class="line">eyJkYXRhIjoiWVo0VEIraWJQai8zUDhWRi9OK2Y3d2JXcG1ucVZGbXhUamtP</span><br><span class="line">S0QyY01BSG9XYlBLRlh0QUcvQ1UzMm9EXG5tU1RSd0pqUmlRT2hOOC9KOWJi</span><br><span class="line">Yk9mZ0krUmt5aWd2WnBNdGYydVZsUTFEemhFSU1jZWk5VjdtTWJycS9cbk9I</span><br><span class="line">V3BmMjR3TFFmcXhQdHVvNVFDbVd0Z2Njc2lNUXhPUzVxUTN0YkRvRDRhYTk2</span><br><span class="line">OVQvbjN4clc1RkNHZlxuUXU0TnZ1OHhqcjlZMTJIZk5yaVd3a2ZLZTBqZitU</span><br><span class="line">cExvem9GTk9QY2d5R3hGdEtkNGVUVzdpa0tQRUNCXG5IRmZYVlVydHdBU3Fm</span><br><span class="line">ei96WFNvaHRGVTFLWW1USkxMOFQ5eW5PTFdpQ1gycXRIYkF1T0hLV0N0bi9W</span><br><span class="line">dE5cbjViZ3VRd05xd2hSOHlNanB6SFhNNC9OemZMVkRVQ3ZTTndVZWR6Q2Q1</span><br><span class="line">Q3hrcE9BOEU1cFN5aXRiSTBkZ1xucTJ1ekJnSHNtdlVVdE5mbjFPUWtTc0FS</span><br><span class="line">dkE2QUxUdGs1ZXZZN3Z6SDJ5N3FMZz09XG4iLCJrZXkiOiJnZ200N1hvRnkr</span><br><span class="line">OTRYb09wcFh5akE1VVo0NTU5REhxeWhVVHMzVWV1dDhRRDRzZGpReVZwRGVp</span><br><span class="line">QkFuajZcblgvL2RvYnM5QVRyYlRZa0V0SEJadUN5bGR5dUhlbEhQSHdJNUxS</span><br><span class="line">RXgyeUpkb2NBRnRVVTNlTjdKcm9ZZ1xuVGJPaXk5c1E4eldNMWhZYWlWWDAy</span><br><span class="line">eDdpTGx6eHA3eDJVSWJpRkZZd2J1dmZXeGtiMk10dnVQdFdsOUt0XG5mcW91</span><br><span class="line">b0dYN0ZZclV1d3NWOGVNNTcyeS90elpMNFBLMFZvTE5vN3d6eEdveW1FbUNP</span><br><span class="line">Sm9kYXVNR0IydjNcbkVybnFac2xsdlo1ZThnNDFKMElLclhLZ1lEK2J3WUR1</span><br><span class="line">a1hqcHk4OU5GZHVaaGgzK3V5ZFNROWJwSC9wYVxuZjA4YUUwUzBkSzhyeTU2</span><br><span class="line">SzVnbEVweFRtc09SZlBTUmhSSVhnalZsYVB3PT1cbiIsIml2IjoiN1VLSTh0</span><br><span class="line">UXo0aFZ6bGV5QW9kSWFxQT09XG4ifQ==</span><br><span class="line">Imported license:</span><br><span class="line"><span class="comment">#&lt;Gitlab::License:0x00007fd086926f40&gt;</span></span><br><span class="line">This instance of GitLab Enterprise Edition is licensed to:</span><br><span class="line">Name: <span class="built_in">test</span></span><br><span class="line">Company: Google Inc</span><br><span class="line">Email: <span class="built_in">test</span>@163.com</span><br><span class="line">The license will expire on 2026-04-23</span><br><span class="line"></span><br><span class="line">ls . <span class="comment"># 查看当前目录下文件</span></span><br><span class="line">GitLabBV.gitlab-license createlicense.rb        license_key             license_key.pub</span><br></pre></td></tr></table></figure><h3 id="3-替换公钥以及激活license"><a class="markdownIt-Anchor" href="#3-替换公钥以及激活license"></a> 3. 替换公钥以及激活license</h3><ul><li><p>将createlicense.rb脚本文件生成的license_key.pub公钥内容替换到gitlab的<code>/opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub</code>中。然后重启gitlab，<code>gitlab-ctl restart</code>.</p></li><li><p>重启完毕后，将脚本生成的GitLabBV.gitlab-license文件，导入gitlab激活页面即可激活了。</p></li></ul><h3 id="4-修改gitlab-ee的等级为ultimate_plan"><a class="markdownIt-Anchor" href="#4-修改gitlab-ee的等级为ultimate_plan"></a> 4. 修改gitlab-ee的等级为ULTIMATE_PLAN</h3><ul><li>修改gitlab的文件</li></ul><p><code>vim /opt/gitlab/embedded/service/gitlab-rails/ee/app/models/license.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plan</span></span></span><br><span class="line">  restricted_attr(<span class="symbol">:plan</span>).presence <span class="params">||</span> STARTER_PLAN  <span class="comment">## 将STARTER_PLAN 修改为 ULTIMATE_PLAN</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="小问题"><a class="markdownIt-Anchor" href="#小问题"></a> 小问题</h3><blockquote><ul><li>就是生成的license虽然可以激活，但是license页面老是报500错误。这个得看下后台日志排查下即可。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要是研究gitlab-ee的licence签发方式，仅供大家学习参考使用。请尊重软件开发者成果，支持正版。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DevOps" scheme="https://blog.shichanson.site/categories/DevOps/"/>
    
    
      <category term="gitlab" scheme="https://blog.shichanson.site/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>本地搭建kubernetes环境</title>
    <link href="https://blog.shichanson.site/2019/12/20/k8s-local-install/"/>
    <id>https://blog.shichanson.site/2019/12/20/k8s-local-install/</id>
    <published>2019-12-20T03:27:45.000Z</published>
    <updated>2019-12-20T03:27:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>此篇文章主要是介绍如何通过minikube快速部署一个k8s环境用作学习和实验。我演示的机器是macOS，k8s版本是1.15.x 最新版本。无需翻墙哦。</p><a id="more"></a><p><strong>条件准备</strong></p><ul><li>安装虚拟化软件virtualbox驱动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install virtualbox </span><br></pre></td></tr></table></figure><ul><li>安装kubectl 客户端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubernetes-cli</span><br></pre></td></tr></table></figure><ul><li>下载阿里云minikube</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.2.0/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><p><strong>开始搭建</strong></p><ul><li>启动minikube安装k8s 1.15.0 版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --registry-mirror=https://registry.docker-cn.com --kubernetes-version v1.15.0</span><br></pre></td></tr></table></figure><ul><li>成果验证</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看节点</span></span><br><span class="line">$ kubectl get node</span><br><span class="line">NAME STATUS ROLES AGE VERSION</span><br><span class="line">minikube Ready master 10m v1.15.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看kube-system ns 下的pod状态</span></span><br><span class="line">$ kubectl get pod -n kube-system</span><br><span class="line">NAME READY STATUS RESTARTS AGE</span><br><span class="line">coredns-6967fb4995-9bplg 1/1 Running 0 10m</span><br><span class="line">coredns-6967fb4995-9xn9t 1/1 Running 0 10m</span><br><span class="line">etcd-minikube 1/1 Running 0 9m25s</span><br><span class="line">kube-addon-manager-minikube 1/1 Running 0 9m8s</span><br><span class="line">kube-apiserver-minikube 1/1 Running 0 9m24s</span><br><span class="line">kube-controller-manager-minikube 1/1 Running 0 9m21s</span><br><span class="line">kube-proxy-2gw65 1/1 Running 0 10m</span><br><span class="line">kube-scheduler-minikube 1/1 Running 0 9m39s</span><br><span class="line">storage-provisioner 1/1 Running 0 10m</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>开启dashboard</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ minikube addons <span class="built_in">enable</span> dashboard</span><br><span class="line">✅ dashboard was successfully enabled</span><br><span class="line"></span><br><span class="line">$ minikube dashboard</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇文章主要是介绍如何通过minikube快速部署一个k8s环境用作学习和实验。我演示的机器是macOS，k8s版本是1.15.x 最新版本。无需翻墙哦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Container Cloud" scheme="https://blog.shichanson.site/categories/Container-Cloud/"/>
    
    
      <category term="kubernetes" scheme="https://blog.shichanson.site/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>docker swarm 部署 gitlab-ee 并设置https</title>
    <link href="https://blog.shichanson.site/2019/12/19/gitlab-install-docker/"/>
    <id>https://blog.shichanson.site/2019/12/19/gitlab-install-docker/</id>
    <published>2019-12-19T03:58:10.000Z</published>
    <updated>2019-12-19T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过docker swarm 安装部署gitlab服务可以更方便的升级版本，以及高效运维。本篇主要介绍gitlab的docker swarm 安装方式。</p><a id="more"></a><ol><li>初始化docker swarm 集群</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker swarm init</span><br></pre></td></tr></table></figure><ol start="2"><li>创建lvm逻辑磁盘卷，格式化并挂载/gitlab目录下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo fdisk /dev/vdb</span><br><span class="line">$ sudo pvcreate /dev/vdb1</span><br><span class="line">$ sudo vgcreate gitlab /dev/vdb1</span><br><span class="line">$ sudo lvcreate -L 199G -n gitlab gitlab</span><br><span class="line">$ sudo mkfs.xfs /dev/gitlab/gitlab</span><br></pre></td></tr></table></figure><ol start="3"><li>创建gitlab数据挂载目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir -pv /gitlab/&#123;config,data,logs&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>开始部署gitlab-ee版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> $ sudo docker service create \</span><br><span class="line">   --name <span class="string">&quot;git-inside-gitlab&quot;</span> \</span><br><span class="line">   --hostname git.test.cn \</span><br><span class="line">   --network pilipa-network \</span><br><span class="line">   --replicas 1 \</span><br><span class="line">   --publish <span class="string">&quot;mode=host,published=2222,target=22&quot;</span> \</span><br><span class="line">   --publish <span class="string">&quot;mode=host,published=80,target=80&quot;</span> \</span><br><span class="line">   --publish <span class="string">&quot;mode=host,published=443,target=443&quot;</span> \</span><br><span class="line">   --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/gitlab/config,dst=/etc/gitlab \</span><br><span class="line">   --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/gitlab/logs,dst=/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">   --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/gitlab/data,dst=/var/opt/gitlab \</span><br><span class="line"><span class="string">&quot;gitlab/gitlab-ee:11.4.9-ee.0&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>配置gitlab.rb</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">external_url <span class="string">&quot;https://git.test.cn&quot;</span></span><br><span class="line">nginx[<span class="string">&#x27;redirect_http_to_https&#x27;</span>] =<span class="literal">true</span></span><br><span class="line">nginx[<span class="string">&#x27;ssl_certificate&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/git.test.cn.crt&quot;</span></span><br><span class="line">nginx[<span class="string">&#x27;ssl_certificate_key&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/git.test.cn.key&quot;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>重新加载配置文件使其生效</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><ol start="7"><li>通过阿里云的SLB代理到ECS上搭建的gitlab服务上，然后设置dns解析即可。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过docker swarm 安装部署gitlab服务可以更方便的升级版本，以及高效运维。本篇主要介绍gitlab的docker swarm 安装方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ops" scheme="https://blog.shichanson.site/categories/Ops/"/>
    
    
      <category term="gitlab" scheme="https://blog.shichanson.site/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>下一代数据中心云操作系统 kubernetes</title>
    <link href="https://blog.shichanson.site/2019/12/01/k8s-cloud-001/"/>
    <id>https://blog.shichanson.site/2019/12/01/k8s-cloud-001/</id>
    <published>2019-12-01T03:06:42.000Z</published>
    <updated>2019-12-01T03:06:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>云时代中的佼佼者k8s的系列高质量干货文章，其中包含基础概念、组件原理、基本使用、生态工具、以及生产中的最佳实践。</p><a id="more"></a><h3 id="本篇前言"><a class="markdownIt-Anchor" href="#本篇前言"></a> 本篇前言</h3><p>在开源领域长期霸持数据中心核心地位非Linux莫属，但是随着云计算的崛起以及开源世界大公司不断加入诞生了新一代数据中心云操作系统k8s，可以毫不夸张的说k8s是开源世界一款伟大产品。</p><h4 id="kubernetes-是什么"><a class="markdownIt-Anchor" href="#kubernetes-是什么"></a> kubernetes 是什么？</h4><p>Kubernetes是一个可移植，可扩展的开源平台，用于管理容器化工作负载和服务，有助于声明性配置和自动化。它拥有庞大，快速发展的生态系统。Kubernetes服务，支持和工具广泛可用。</p><p>Kubernetes这个名字源于希腊语，意思是舵手或飞行员。谷歌在2014年开放了Kubernetes项目.Kubernetes建立在谷歌拥有大量运行生产工作量的十五年经验的基础上，结合了社区中的最佳创意和实践。</p><p><strong>IT应用运维变迁</strong></p><p>透过IT应用运维的变迁，让我们来看看为什么Kubernetes如此有用和伟大。</p><p>下一代数据中心云操作系统 kubernetes「容器云连载」</p><p><strong>物理机部署时代</strong>： 早期，在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源浪费问题。例如，如果在物理服务器上运行多个应用程序，则可能存在一个应用程序占用大部分资源的情况，因此其他应用程序会受到影响。解决方案是在不同的物理服务器上运行不同应用程序。但是由于资源未得到充分利用，并且扩展性很差，企业维护许多物理服务器的成本很高。</p><p><strong>虚拟化部署时代</strong>：为了解决资源利用率的问题，引入了虚拟化。它允许您在单个物理服务器的CPU上运行多个虚拟机（VM）。虚拟化允许应用程序在VM之间隔离，并提供一定程度的安全性，因为另一个应用程序无法随便访问另外一VM上运行应用程序的信息。</p><p>虚拟化可以更好地利用物理服务器中的资源，也可以实现更好的可扩展性，快速添加或更新应用程序，降低硬件成本等等优点。</p><p>每个VM都是在虚拟化硬件之上运行包含所有组件（包括其自己的操作系统）的完整操作系统。</p><p><strong>容器部署时代</strong>：容器类似于VM，但它们属于轻量级虚拟化，隔离性相对宽松。多个应用程序容器之间共享宿主操作系统（OS）。与VM类似，容器具有自己的文件系统，CPU，内存，进程空间等。当它们与底层基础架构分离时，它们可以跨云和OS分发进行移植。</p><p><strong>容器的优势</strong></p><ul><li>敏捷应用程序创建和部署：与VM映像使用相比，增加了容器镜像创建的简便性和效率。</li><li>持续开发，集成和部署：通过快速简便的回滚（由于镜像不变性）提供可靠且频繁的容器镜像构建和部署。</li><li>Dev和Ops关注点分离：在构建/发布时而不是部署时创建应用程序容器镜像，从而将应用程序与基础架构分离。</li><li>开发，测试和生产的环境一致性：在笔记本电脑上运行与在云中运行相同。</li><li>云和操作系统分发可移植性：在Ubuntu，RHEL，CoreOS，本地，阿里云，腾讯云和其他任何地方都可以运行。</li><li>以应用程序为中心的管理：提高在虚拟硬件上运行OS的抽象级别，以及使用逻辑资源在OS上运行应用程序。</li><li>资源隔离与利用：可预测的应用程序性能，高效率和高密度。</li></ul><h3 id="为什么需要kubernetes-以及用它能做什么"><a class="markdownIt-Anchor" href="#为什么需要kubernetes-以及用它能做什么"></a> 为什么需要kubernetes 以及用它能做什么？</h3><p>在生产环境中，您需要管理运行应用程序的容器并确保没有停机时间。例如，如果容器发生故障，则需要启动另一个容器，添加负载均衡等一系列动作。如果这些直接交给一个系统去处理，会不会更高效和便捷？</p><p>kubernetes 就是很好解决了包含以上所说各种问题的系统 ！Kubernetes为您提供了一个弹性运行分布式系统的框架。它可以管理应用的扩展，故障转移，负载均衡等。例如，Kubernetes可以轻松管理应用系统的canary发布。k8s 提供如下有用特性：</p><ul><li><strong>服务发现和负载平衡</strong></li></ul><p>Kubernetes可以使用内部DNS名称或使用自己的IP地址提供服务入口。如果容器的流量很高，Kubernetes能够负载均衡并分配网络流量，确保应用可以稳定提供服务。</p><ul><li><strong>存储编排</strong></li></ul><p>Kubernetes允许您自动安装您选择的存储系统，例如本地存储，公共云提供商等。</p><ul><li><strong>自动部署和回滚</strong></li></ul><p>您可以使用Kubernetes描述已部署容器的所需状态，并且可以控制速率将实际状态更改为所需状态。例如，您可以控制Kubernetes为您的deploy自动创建新容器，删除现有容器并将所有资源用于新容器。</p><ul><li><strong>自我修复与高可用</strong></li></ul><p>Kubernetes重新启动失败的容器，替换容器，杀死不响应用户定义的运行状况检查的容器，并且服务没有真正运行就绪前不会提前暴露给调用客户端。</p><ul><li><strong>密钥和配置管理</strong></li></ul><p>Kubernetes允许您存储和管理敏感信息，例如密码，OAuth令牌和ssh密钥。您可以部署和更新秘钥和应用程序配置，而无需重建容器镜像，也不会在应用程序中暴露秘钥。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;云时代中的佼佼者k8s的系列高质量干货文章，其中包含基础概念、组件原理、基本使用、生态工具、以及生产中的最佳实践。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Container Cloud" scheme="https://blog.shichanson.site/categories/Container-Cloud/"/>
    
    
      <category term="kubernetes" scheme="https://blog.shichanson.site/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>jenkins 初始化无法拉取插件的解决办法</title>
    <link href="https://blog.shichanson.site/2019/11/21/k8s-jenkins-ops/"/>
    <id>https://blog.shichanson.site/2019/11/21/k8s-jenkins-ops/</id>
    <published>2019-11-21T02:58:10.000Z</published>
    <updated>2019-11-21T02:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>jenkins被很多互联网用于devops工具，同时jenkins拥有庞大的插件生态使其拥有强大的功能，但是拉取插件的时候遇到了下载不了的问题，通过配置国内插件镜像中心来解决。</p><a id="more"></a><p>环境描述: 生产环境的jenkins 出现故障，删除jenkins应用的pod，使其重建，但是拉取的插件中心是updates.jenkins.io站点，这个站点突然无法访问。我们jenkins始终无法启动。jenkins的deploy会启动一个initcontainer来初始化配置以及拉取插件hpi文件。但是始终无法拉取成功。</p><p>看到github中个解决方案，在jenkins的init容器中加了一个环境变量就可以从jenkins的镜像节点拉取完毕。</p><p>环境变量是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_UC_DOWNLOAD: https://mirrors.tuna.tsinghua.edu.cn/jenkins/</span><br></pre></td></tr></table></figure><p>同时改下配置文件：</p><p>jenkins/hudson.model.UpdateCenter.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&#x27;1.1&#x27;</span> encoding=<span class="string">&#x27;UTF-8&#x27;</span>?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">  &lt;site&gt;</span><br><span class="line">    &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/current/update-center.json&lt;/url&gt;</span><br><span class="line">  &lt;/site&gt;</span><br><span class="line">&lt;/sites&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jenkins被很多互联网用于devops工具，同时jenkins拥有庞大的插件生态使其拥有强大的功能，但是拉取插件的时候遇到了下载不了的问题，通过配置国内插件镜像中心来解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DevOps" scheme="https://blog.shichanson.site/categories/DevOps/"/>
    
    
      <category term="tools" scheme="https://blog.shichanson.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>docker 搭建 shadowsocks 服务器</title>
    <link href="https://blog.shichanson.site/2019/11/20/docker-shadowsocks-install/"/>
    <id>https://blog.shichanson.site/2019/11/20/docker-shadowsocks-install/</id>
    <published>2019-11-20T03:58:10.000Z</published>
    <updated>2019-11-20T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>搭建科学上网工具，想必通过Docker 部署的方式是最高效和简单的。本篇文章则是介绍如何通过docker 搭建 shadowsock 科学上网服务。</p><a id="more"></a><ol><li>安装docker命令行工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br><span class="line"></span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable&quot;</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><ol start="2"><li>执行如下命令，同时执行开放相应的防火墙</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart unless-stopped -p 12345:12345 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 12345 -k test12345  -m aes-256-cfb</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建科学上网工具，想必通过Docker 部署的方式是最高效和简单的。本篇文章则是介绍如何通过docker 搭建 shadowsock 科学上网服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ops" scheme="https://blog.shichanson.site/categories/Ops/"/>
    
    
      <category term="tools" scheme="https://blog.shichanson.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>算法解析-二分查找</title>
    <link href="https://blog.shichanson.site/2019/05/05/coding-py/"/>
    <id>https://blog.shichanson.site/2019/05/05/coding-py/</id>
    <published>2019-05-05T00:07:07.000Z</published>
    <updated>2019-05-05T00:07:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>常用算法学习，并附上 python 代码实现。该篇博客主要介绍二分查找算法的原理解析与代码实现。</p><a id="more"></a><p><strong>场景解析：</strong></p><p>       现在假设你登录 Facebook。当你这样做时，Facebook 必须核实你是否有其网站的账户，因此必须在其数据库中查找你的用户名。如果你的用户名为 karlmageddon，Facebook 可从以 A 打头的部分开始查找，但更合乎逻辑的做法是从中间开始查找。这是一个查找问题，在前述所有情况下，都可使用同一种算法来解决问题，这种算法就是二分查找 。</p><p><strong>基本条件：</strong></p><p>       二分查找是一种算法，其输入是一个有序的元素列表。如果要查找的元素包含在列表中，二分查找返回其位置；否则返回 null 。</p><p><strong>算法原理解析：</strong></p><p>       从 1-100 中随机挑出一个数字，然后用最少的次数猜中这个次数，如果用蛮力的方法从 1 开始猜，如果挑中的数字是 99 那么最起码要猜 99 次。那么介绍另外一种方法，从 50 开始猜。小了，但排除了一半的数字！至此，你知道 1 ～ 50 都小了。接下来，你猜 75。大了，那余下的数字又排除了一半！使用二分查找时，你猜测的是中间的数字，从而每次都将余下的数字排除一半。接下来，你猜 63（50 和 75 中间的数字）。经过几次猜测即可猜中。这就是二分查找原理。那么对于二分查找一般多少次可以能猜中呢。</p><p><span align="center">答案：<b>log<sub>2</sub>N</b></span> 次</p><p><strong>公式解析：对数</strong></p><p>       你可能不记得什么是对数了，但很可能记得什么是幂。log<sub>10</sub> 100 相当于问“将多少个 10 相乘的结果为 100”。答案是两个：10 × 10 = 100。因此，log<sub>10</sub> 100 = 2。对数运算是幂运算的逆运算。</p><p><strong>code 片段演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;二分查找代码实现&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fastSearch</span>(<span class="params">glist, guess</span>):</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = len(glist) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        mid = (end + start) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> guess == glist[mid]:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> guess &gt; glist[mid]:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">    guess = <span class="number">3</span></span><br><span class="line">    print(fastSearch(ls, guess))</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p>数组一定是有序的。</p><p><strong>运行时间:</strong></p><p>一般而言，应选择效率最高的算法，以最大限度地减少运行时间或占用空间。对于 40 亿有序数组的普通查找最多用 40 亿次方可查询到，对于查询时间与数组长度成正比，称为线性时间。而对于通过二分法查找的方式，40 亿数组则需要最多需要 40 亿的对数次。二分查找的运行时间为对数时间。</p><p><strong>大 O 表示法:</strong></p><p>大 O 表示法是一种特殊方法，他表示方法的速度有多快。表示方法是 O(log<sub>2</sub>N).其中 log<sub>2</sub>N 表示操作数。</p><p><strong>适用场景:</strong></p><p>大 O 表示法所能代表的是当前算法最糟糕的时候运行时间。</p><p><strong>常见运行时间:</strong></p><ol><li>O(logn)，也叫对数时间，这样的算法包括二分查找。</li><li>O(n)，也叫线性时间，这样的算法包括简单查找。</li><li>O(n*logn)，这样的算法包括第 4 章将介绍的快速排序——一种速度较快的排序算法。</li><li>O(n2)，这样的算法包括第 2 章将介绍的选择排序——一种速度较慢的排序算法。</li><li>O(n!)，这样的算法包括接下来将介绍的旅行商问题的解决方案——一种非常慢的算法。</li></ol><p><strong>运行时间总结:</strong></p><ol><li>算法的速度指的并非时间，而是操作数的增速。</li><li>谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。</li><li>算法的运行时间用大 O 表示法表示。O(log n)比 O(n)快，当需要搜索的元素越多时，前者比后者快得越多。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用算法学习，并附上 python 代码实现。该篇博客主要介绍二分查找算法的原理解析与代码实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://blog.shichanson.site/categories/Coding/"/>
    
    
      <category term="算法" scheme="https://blog.shichanson.site/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>helm使用技巧篇</title>
    <link href="https://blog.shichanson.site/2019/01/03/magic-of-helm/"/>
    <id>https://blog.shichanson.site/2019/01/03/magic-of-helm/</id>
    <published>2019-01-03T04:23:50.000Z</published>
    <updated>2019-01-03T04:23:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>helm 的核心优点在于 charts 一次编写到处运行以及其版本跟踪的能力。本篇博文主要讲述 helm 在本地开发 charts 时的一些技巧，通过这些技巧可以大大增加 charts 的易用性以及扩展性。</p><a id="more"></a><p><strong>针对 helm 篇的实践落地方案分为如下几个部分：</strong></p><blockquote><ul><li>helm 基础理论篇</li><li>helm 使用技巧篇</li><li>基础中间件服务运维篇</li><li>微服务应用版本管理篇</li><li>基于 jenkins + helm 的 CICD 方案</li><li>Helm 实践趟坑篇</li><li>基于 Helm Istio Jenkins 灰度发布实践方案</li></ul></blockquote><p>本篇博文是该系列博客中的第二篇文章**《helm 的使用技巧》**。社区以及官方文档大多提供的是针对单个服务的 charts 编写指导。对于有依赖关系的多个服务时也是通过子 charts 的方式来实现多服务组件部署，但是本质上还是一个 charts 一个服务。这对于动辄十来个组件的微服务架构应用来说，显然是不可取的方案。针对微服务应用场景，我们总结一些 helm 撰写 charts 的最佳实践。</p><h3 id="debug-调试妙用"><a class="markdownIt-Anchor" href="#debug-调试妙用"></a> debug 调试妙用</h3><p><strong>使用场景：</strong></p><p><strong>helm</strong> 应用发布工具一般很少单独使用，在企业中的应用一般都是作为 DevOps 工具链中的一环。我们在做基础服务运维的时候一般都应该遵循一个基本原则“<strong>infra as code</strong>”。这样可以确保基础服务的可控和可追溯性。为了避免 charts 在实际运行中出错，我们可以在本地写 charts 的时候通过 debug 的功能，在不生成具体 release 的情况下检查 charts 是否存在语法错误和内容错误。</p><p><strong>实践总结：</strong></p><p>使用 Debug 功能的前提需要一个 k8s 集群且本地 helm 能够连接上该集群。最佳实践是尽可能确保本地 k8s 环境能与测试以及生产环境保持一致，这样才能确保 charts 的兼容性。笔者就遇到过这样的问题，charts 中包含了阿里云的日志服务 yaml 模板，在本地 minikube 集群上使用 helm 工具 debug 的时候总是报错的情况。最后将本地的 helm 工具直接连接阿里云上的 k8s 集群上，才顺利 debug。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">helm install --dry-run --debug --name <span class="built_in">test</span> tomcat</span><br><span class="line">[debug] Created tunnel using <span class="built_in">local</span> port: <span class="string">&#x27;51358&#x27;</span></span><br><span class="line"></span><br><span class="line">[debug] SERVER: <span class="string">&quot;127.0.0.1:51358&quot;</span></span><br><span class="line"></span><br><span class="line">[debug] Original chart version: <span class="string">&quot;&quot;</span></span><br><span class="line">[debug] CHART PATH: /Users/mayershi/akd/charts/stable/tomcat</span><br><span class="line"></span><br><span class="line">NAME:   <span class="built_in">test</span></span><br><span class="line">REVISION: 1</span><br><span class="line">RELEASED: Sat Mar 16 12:49:23 2019</span><br><span class="line">CHART: tomcat-0.2.0</span><br><span class="line">USER-SUPPLIED VALUES:</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">COMPUTED VALUES:</span><br><span class="line">affinity: &#123;&#125;</span><br><span class="line">deploy:</span><br><span class="line">  directory: /usr/<span class="built_in">local</span>/tomcat/webapps</span><br><span class="line">image:</span><br><span class="line">  pullPolicy: IfNotPresent</span><br><span class="line">  pullSecrets: []</span><br><span class="line">  tomcat:</span><br><span class="line">    repository: tomcat</span><br><span class="line">    tag: <span class="string">&quot;7.0&quot;</span></span><br><span class="line">  webarchive:</span><br><span class="line">    repository: ananwaresystems/webarchive</span><br><span class="line">    tag: <span class="string">&quot;1.0&quot;</span></span><br><span class="line">ingress:</span><br><span class="line">  annotations: &#123;&#125;</span><br><span class="line">  enabled: <span class="literal">false</span></span><br><span class="line">  hosts:</span><br><span class="line">  - chart-example.local</span><br><span class="line">  path: /</span><br><span class="line">  tls: []</span><br><span class="line">livenessProbe:</span><br><span class="line">  initialDelaySeconds: 60</span><br><span class="line">  path: /sample</span><br><span class="line">  periodSeconds: 30</span><br><span class="line">nodeSelector: &#123;&#125;</span><br><span class="line">readinessProbe:</span><br><span class="line">  failureThreshold: 6</span><br><span class="line">  initialDelaySeconds: 60</span><br><span class="line">  path: /sample</span><br><span class="line">  periodSeconds: 30</span><br><span class="line">replicaCount: 1</span><br><span class="line">resources: &#123;&#125;</span><br><span class="line">service:</span><br><span class="line">  externalPort: 80</span><br><span class="line">  internalPort: 8080</span><br><span class="line">  name: http</span><br><span class="line">  <span class="built_in">type</span>: LoadBalancer</span><br><span class="line">tolerations: []</span><br><span class="line"></span><br><span class="line">HOOKS:</span><br><span class="line">MANIFEST:</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># Source: tomcat/templates/appsrv-svc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-tomcat</span><br><span class="line">  labels:</span><br><span class="line">    app: tomcat</span><br><span class="line">    chart: tomcat-0.2.0</span><br><span class="line">    release: <span class="built_in">test</span></span><br><span class="line">    heritage: Tiller</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 8080</span><br><span class="line">      protocol: TCP</span><br><span class="line">      name: http</span><br><span class="line">  selector:</span><br><span class="line">    app: tomcat</span><br><span class="line">    release: <span class="built_in">test</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># Source: tomcat/templates/appsrv.yaml</span></span><br><span class="line">apiVersion: apps/v1beta2</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-tomcat</span><br><span class="line">  labels:</span><br><span class="line">    app: tomcat</span><br><span class="line">    chart: tomcat-0.2.0</span><br><span class="line">    release: <span class="built_in">test</span></span><br><span class="line">    heritage: Tiller</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: tomcat</span><br><span class="line">      release: <span class="built_in">test</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: tomcat</span><br><span class="line">        release: <span class="built_in">test</span></span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">        - name: app-volume</span><br><span class="line">          emptyDir: &#123;&#125;</span><br><span class="line">      initContainers:</span><br><span class="line">        - name: war</span><br><span class="line">          image: ananwaresystems/webarchive:1.0</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          <span class="built_in">command</span>:</span><br><span class="line">            - <span class="string">&quot;sh&quot;</span></span><br><span class="line">            - <span class="string">&quot;-c&quot;</span></span><br><span class="line">            - <span class="string">&quot;cp /*.war /app&quot;</span></span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: app-volume</span><br><span class="line">              mountPath: /app</span><br><span class="line">      containers:</span><br><span class="line">        - name: tomcat</span><br><span class="line">          image: tomcat:7.0</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: app-volume</span><br><span class="line">              mountPath: /usr/<span class="built_in">local</span>/tomcat/webapps</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 8080</span><br><span class="line">              hostPort: 8009</span><br><span class="line">          livenessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /sample</span><br><span class="line">              port: 8080</span><br><span class="line">            initialDelaySeconds: 60</span><br><span class="line">            periodSeconds: 30</span><br><span class="line">          readinessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /sample</span><br><span class="line">              port: 8080</span><br><span class="line">            initialDelaySeconds: 60</span><br><span class="line">            periodSeconds: 30</span><br><span class="line">            failureThreshold: 6</span><br><span class="line">          resources:</span><br><span class="line">            &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="多组件利器数组"><a class="markdownIt-Anchor" href="#多组件利器数组"></a> 多组件利器数组</h3><p>在社区以及一些其他同行的博客教程中一般都是单个服务单个 charts 的方式，但是这种对于采用了微服务架构的应用是有问题的。有很多的缺陷，比如： 不能对应用进行统一的版本管理；需要编写大量的 charts 效率不高。那么解决这个问就需要引入 helm 的控制结构。</p><p><strong>helm 循环控制结构：</strong></p><p>values.yaml 值文件部分示例内容。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app1</span></span><br><span class="line">    <span class="attr">replicaCount:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">image:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">app1:1</span></span><br><span class="line">      <span class="attr">repository:</span> <span class="string">dockerhub.com</span></span><br><span class="line">      <span class="attr">pullPolicy:</span> <span class="string">Always</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">      <span class="attr">externalPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">internalPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">healthUrl:</span> <span class="string">/token</span></span><br><span class="line">      <span class="attr">managementPort:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">container:</span></span><br><span class="line">      <span class="attr">spring:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">limitmemory:</span> <span class="string">256Mi</span></span><br><span class="line">      <span class="attr">env:</span> &#123;&#125;</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app2</span></span><br><span class="line">    <span class="attr">replicaCount:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">image:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">app2:1</span></span><br><span class="line">      <span class="attr">repository:</span> <span class="string">dockerhub.com</span></span><br><span class="line">      <span class="attr">pullPolicy:</span> <span class="string">Always</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">      <span class="attr">externalPort:</span> <span class="number">12180</span></span><br><span class="line">      <span class="attr">internalPort:</span> <span class="number">12180</span></span><br><span class="line">      <span class="attr">healthUrl:</span> <span class="string">&quot;/manage/status&quot;</span></span><br><span class="line">      <span class="attr">managementPort:</span> <span class="number">12181</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">container:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">2048Mi</span></span><br><span class="line">      <span class="attr">limitmemory:</span> <span class="string">2048Mi</span></span><br><span class="line">      <span class="attr">spring:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">hpa:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">memory</span></span><br><span class="line">        <span class="attr">value:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ALI_LOGSTORE</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">app2</span></span><br></pre></td></tr></table></figure><p>deploy 和 service 模板文件内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">range</span> <span class="string">$index</span>, <span class="string">$container</span> <span class="string">:=</span> <span class="string">.Values.containers</span> &#125;&#125; <span class="string">//</span> <span class="string">由于helm是golang开发的所以，对于控制结构来说，他的循环控制结构和golang保持一致。通过这个循环控制结构可以将value值文件中的containers值下面的数组给遍历出来生成相应的deploy</span> <span class="string">和</span> <span class="string">service</span> <span class="string">的k8s的资源。</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> &#123;&#123; <span class="string">$fullname</span> &#125;&#125;<span class="string">-&#123;&#123;</span> <span class="string">$container.name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> &#123;&#123; <span class="string">$fullname</span> &#125;&#125;<span class="string">-&#123;&#123;</span> <span class="string">$container.name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">chart:</span> &#123;&#123; <span class="string">$chartname</span> &#125;&#125;</span><br><span class="line">    <span class="attr">release:</span> &#123;&#123; <span class="string">$root.Release.Name</span> &#125;&#125;</span><br><span class="line">    <span class="attr">heritage:</span> &#123;&#123; <span class="string">$root.Release.Service</span> &#125;&#125;</span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> &#123;&#123; <span class="string">$container.replicaCount</span> &#125;&#125;</span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span>  <span class="string">&quot;<span class="template-variable">&#123;&#123; $fullname &#125;&#125;</span>-<span class="template-variable">&#123;&#123; $container.name &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">release:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $root.Release.Name &#125;&#125;</span>&quot;</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $fullname &#125;&#125;</span>-<span class="template-variable">&#123;&#123; $container.name &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">release:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $root.Release.Name &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">aliyun-registry-secret</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span>  &#123;&#123; <span class="string">$fullname</span> &#125;&#125;<span class="string">-&#123;&#123;</span> <span class="string">$container.name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">image:</span> &#123;&#123; <span class="string">$container.image.repository</span> &#125;&#125;<span class="string">/&#123;&#123;</span> <span class="string">$container.image.name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> &#123;&#123; <span class="string">$container.image.pullPolicy</span> &#125;&#125;</span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> &#123;&#123; <span class="string">$container.service.internalPort</span> &#125;&#125;</span><br><span class="line">        &#123;&#123; <span class="string">if</span> <span class="string">$container.service.healthUrl</span> &#125;&#125;</span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> &#123;&#123; <span class="string">$container.service.healthUrl</span> &#125;&#125;</span><br><span class="line">            <span class="attr">port:</span> &#123;&#123; <span class="string">$container.service.managementPort</span> &#125;&#125;</span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> &#123;&#123; <span class="string">$container.service.healthUrl</span> &#125;&#125;</span><br><span class="line">            <span class="attr">port:</span> &#123;&#123; <span class="string">$container.service.managementPort</span> &#125;&#125;</span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">        &#123;&#123; <span class="string">end</span> &#125;&#125;</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">aliyun_logs_image_tags</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">docker-image=&#123;&#123;</span> <span class="string">$container.image.repository</span> <span class="string">&#125;&#125;/&#123;&#123;</span> <span class="string">$container.image.name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          &#123;&#123; <span class="string">if</span> <span class="string">$container.container.spring</span> &#125;&#125;</span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JAVA_OPTIONS</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&gt;-</span></span><br><span class="line">              <span class="string">-XX:+UseG1GC</span></span><br><span class="line">              <span class="string">-XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line">              <span class="string">-Duser.timezone=Asia/Hong_Kong</span></span><br><span class="line">              <span class="string">-Dspring.profiles.active=&#123;&#123;</span> <span class="string">$root.Values.container.spring.profile</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          &#123;&#123; <span class="string">end</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">if</span> <span class="string">$container.container.env</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">toYaml</span> <span class="string">$container.container.env</span> <span class="string">|</span> <span class="string">indent</span> <span class="number">10</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">end</span> &#125;&#125;</span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">        &#123;&#123; <span class="string">if</span> <span class="string">or</span> <span class="string">$container.container.cpu</span> <span class="string">$container.container.memory</span> &#125;&#125;</span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">          &#123;&#123; <span class="string">if</span> <span class="string">$container.container.cpu</span> &#125;&#125;</span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $container.container.cpu &#125;&#125;</span>&quot;</span></span><br><span class="line">          &#123;&#123; <span class="string">end</span> &#125;&#125;</span><br><span class="line">          &#123;&#123; <span class="string">if</span> <span class="string">$container.container.memory</span> &#125;&#125;</span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $container.container.memory &#125;&#125;</span>&quot;</span></span><br><span class="line">          &#123;&#123; <span class="string">end</span> &#125;&#125;</span><br><span class="line">        &#123;&#123; <span class="string">end</span> &#125;&#125;</span><br><span class="line">        &#123;&#123; <span class="string">if</span> <span class="string">or</span> <span class="string">$container.container.limitcpu</span> <span class="string">$container.container.limitmemory</span> &#125;&#125;</span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">          &#123;&#123; <span class="string">if</span> <span class="string">$container.container.limitcpu</span> &#125;&#125;</span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $container.container.limitcpu &#125;&#125;</span>&quot;</span></span><br><span class="line">          &#123;&#123; <span class="string">end</span> &#125;&#125;</span><br><span class="line">          &#123;&#123; <span class="string">if</span> <span class="string">$container.container.limitmemory</span> &#125;&#125;</span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $container.container.limitmemory &#125;&#125;</span>&quot;</span></span><br><span class="line">          &#123;&#123; <span class="string">end</span> &#125;&#125;</span><br><span class="line">        &#123;&#123; <span class="string">end</span> &#125;&#125;</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> &#123;&#123; <span class="string">$serviceprefix</span> &#125;&#125;<span class="string">-&#123;&#123;</span> <span class="string">$container.name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> &#123;&#123; <span class="string">$name</span> &#125;&#125;</span><br><span class="line">    <span class="attr">chart:</span> &#123;&#123; <span class="string">$chartname</span> &#125;&#125;</span><br><span class="line">    <span class="attr">release:</span> &#123;&#123; <span class="string">$root.Release.Name</span> &#125;&#125;</span><br><span class="line">    <span class="attr">heritage:</span> &#123;&#123; <span class="string">$root.Release.Service</span> &#125;&#125;</span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> &#123;&#123; <span class="string">$container.service.type</span> &#125;&#125;</span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> &#123;&#123; <span class="string">$container.service.externalPort</span> &#125;&#125;</span><br><span class="line">      <span class="attr">targetPort:</span> &#123;&#123; <span class="string">$container.service.internalPort</span> &#125;&#125;</span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">name:</span> &#123;&#123; <span class="string">$fullname</span> &#125;&#125;<span class="string">-&#123;&#123;</span> <span class="string">$container.name</span> <span class="string">&#125;&#125;-http</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> &#123;&#123; <span class="string">$fullname</span> &#125;&#125;<span class="string">-&#123;&#123;</span> <span class="string">$container.name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">release:</span> &#123;&#123; <span class="string">$root.Release.Name</span> &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure><p>将 values.yaml 值文件 和 deploy-server.yaml 模板文件通过 helm 渲染得出真正的 deploy 的 yaml 以及 service 的 yaml 文件。然后 k8s 接受到后，会生成相应的资源。</p><h3 id="组件个性化开关"><a class="markdownIt-Anchor" href="#组件个性化开关"></a> 组件个性化开关</h3><p>每个应用的配置以及运行状态是不一样的,比如: java 启动的参数，node 应用的启动环境变量等等，所以就涉及到应用个性化参数开关的问题，那么解决这个的方案就是 helm 的条件控制结构。<br /><strong>helm 条件控制结构</strong><br />上面的实例文件中 containers 的数组的每个想内部存的是单个 deploy + service 的 value 值。从文件中可以看出差异部分。<br />第一个服务组件的值文件 spring 的值是 false。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">```</span></span><br><span class="line"></span><br><span class="line"><span class="string">第二个服务组件的值文件</span> <span class="string">spring</span> <span class="string">的值是</span> <span class="literal">true</span><span class="string">。</span></span><br><span class="line"></span><br><span class="line"><span class="string">```yaml</span></span><br><span class="line"><span class="attr">container:</span></span><br><span class="line">  <span class="attr">memory:</span> <span class="string">2048Mi</span></span><br><span class="line">  <span class="attr">limitmemory:</span> <span class="string">2048Mi</span></span><br><span class="line">  <span class="attr">spring:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hpa:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">memory</span></span><br><span class="line">    <span class="attr">value:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ALI_LOGSTORE</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">app2</span></span><br></pre></td></tr></table></figure><p>deploy-service.yaml 文件中关于这块的文件描述是这样的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">aliyun_logs_image_tags</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">docker-image=&#123;&#123;</span> <span class="string">$container.image.repository</span> <span class="string">&#125;&#125;/&#123;&#123;</span> <span class="string">$container.image.name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  &#123;&#123; <span class="string">if</span> <span class="string">$container.container.spring</span> &#125;&#125;</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JAVA_OPTIONS</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&gt;-</span></span><br><span class="line">      <span class="string">-XX:+UseG1GC</span></span><br><span class="line">      <span class="string">-XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line">      <span class="string">-Duser.timezone=Asia/Hong_Kong</span></span><br><span class="line">      <span class="string">-Dspring.profiles.active=&#123;&#123;</span> <span class="string">$root.Values.container.spring.profile</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  &#123;&#123; <span class="string">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure><p>运行结果就是当 spring 值是 true 的时候。env 的内容就会添加 Java 启动的环境变量参数。spring 值为 false 的时候就不会添加该环境变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;helm 的核心优点在于 charts 一次编写到处运行以及其版本跟踪的能力。本篇博文主要讲述 helm 在本地开发 charts 时的一些技巧，通过这些技巧可以大大增加 charts 的易用性以及扩展性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Container Cloud" scheme="https://blog.shichanson.site/categories/Container-Cloud/"/>
    
    
      <category term="helm" scheme="https://blog.shichanson.site/tags/helm/"/>
    
  </entry>
  
  <entry>
    <title>helm基础概念</title>
    <link href="https://blog.shichanson.site/2018/12/11/helm-basic/"/>
    <id>https://blog.shichanson.site/2018/12/11/helm-basic/</id>
    <published>2018-12-10T18:28:13.000Z</published>
    <updated>2018-12-10T18:28:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes的巨大成功创造了一个工具生态系统，可以简化应用程序开发和部署的复杂性。而该系列文章主要分享helm在噼里啪技术团队的生产实践经验总结。</p><a id="more"></a><p><strong>针对helm篇的实践落地方案分为如下几个部分：</strong></p><blockquote><ul><li>helm 基础理论篇</li><li>helm 使用技巧篇</li><li>基础中间件服务运维篇</li><li>微服务应用版本管理篇</li><li>基于jenkins + helm的CICD方案</li><li>Helm 实践趟坑篇</li><li>基于Helm Istio Jenkins灰度发布实践方案</li></ul></blockquote><h3 id="helm-是什么"><a class="markdownIt-Anchor" href="#helm-是什么"></a> helm 是什么</h3><p><strong><a href="https://github.com/helm/helm.git">helm</a></strong> 是一款可以帮你在k8s上很好运维管理复杂的应用包管理工具。如果把k8s比作CentOS操作系统的话，那么helm类似CentOS系统中的yum工具。</p><p><em>这两个工具从某种程度来说的确很相似，yum可以解决rpm之间的依赖问题，而helm也可以解决应用与基础服务依赖关系。比如：WordPress应用启动之前需要启动MySQL，那就可以在WordPress的charts里定义需要依赖MySQL的charts。那么在部署WordPress的charts时，helm也会拉取并部署MySQL的Charts。</em></p><h3 id="helm-名称概念"><a class="markdownIt-Anchor" href="#helm-名称概念"></a> helm 名称概念</h3><p><strong>Charts:</strong> yum安装的rpm包则对应helm的charts。charts包含了整套复杂应用组件的k8s资源（Deployment、Service、Ingress、ConfigMap、Secret等）模板yaml文件以及模板对应value文件。Chart的目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mychart</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── charts</span><br><span class="line">├── templates</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   └── service.yaml</span><br><span class="line">└── values.yaml</span><br></pre></td></tr></table></figure><ul><li>charts 目录存放依赖的 chart</li><li>Chart.yaml 包含 Chart 的基本信息，包括 chart 版本，名称等</li><li>templates 目录下存放应用一系列 k8s 资源的 yaml 模板</li><li>_helpers.tpl 此文件中定义一些可重用的模板片断，此文件中的定义在任何资源定义模板中可用</li><li>NOTES.txt 介绍 chart 部署后的帮助信息，如何使用 chart 等</li><li>values.yaml 包含了必要的值定义（默认值）, 用于存储 templates 目录中模板文件中用到变量的值</li></ul><p><strong>Release:</strong> 扩展上述类比，要在基于CentOS的系统上安装NGNIX，您将运行yum install nginx。同样，要将NGINX安装到Kubernetes集群，您只需运行helm install nginx即可。每次向群集安装Charts都称为release。但是，与传统的操作系统软件包管理器不同，使用Helm可以轻松地将一个charts多次安装到单个集群中，每个release都有自己的特定配置。所以简单的来说一个release就是一个charts的实例化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm ls </span><br><span class="line">istio                             1       Thu Dec 13 11:50:08 2018DEPLOYEDack-istio-1.0.4             1.0.4        istio-system</span><br></pre></td></tr></table></figure><p><strong>Repositories:</strong> Helm Charts 还可以发布到存储库。这些charts可以发布到私有仓库，也可以是公共托管。像yum和apt一样，可以搜索它们以发现可用的charts。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">helm search nginx</span><br><span class="line">NAME                       CHART VERSIONAPP VERSIONDESCRIPTION</span><br><span class="line">stable/nginx-ingress       1.0.0        0.21.0     An nginx Ingress controller that uses ConfigMap to store ...</span><br><span class="line">stable/nginx-ldapauth-proxy0.1.2        1.13.5     nginx proxy with ldapauth</span><br><span class="line">stable/nginx-lego          0.3.1                   Chart <span class="keyword">for</span> nginx-ingress-controller and kube-lego</span><br><span class="line">stable/gcloud-endpoints    0.1.2        1          DEPRECATED Develop, deploy, protect and monitor your APIs...</span><br></pre></td></tr></table></figure><h3 id="helm-核心组件"><a class="markdownIt-Anchor" href="#helm-核心组件"></a> HELM 核心组件</h3><p><strong>helm</strong> 是个客户端工具，它主要的作用如下：</p><ul><li>本地chart开发</li><li>管理repositories</li><li>与tiller 服务端进行交互<ul><li>发送要安装的charts</li><li>获取相关release的信息</li><li>请求更新或者删除已存在的release</li></ul></li></ul><p><strong>tiller</strong> 是一个部署在k8s集群内部的一个与helm客户端进行交互同时也与k8s api连接的服务。主要负责如下功能：</p><ul><li>监听来自helm客户端传入的请求</li><li>将charts和配置组合渲染来构建一个release</li><li>将charts部署到k8s集群中并跟踪后续版本</li><li>通过与k8s进行交互来更新以及删除集群中存在的release。</li></ul><center>![](/media/posts/media/jh.png)</center>简而言之，helm 客户端负责管理charts, tiller 服务端负责管理release生命周期。<h3 id="helm-内部实现"><a class="markdownIt-Anchor" href="#helm-内部实现"></a> helm 内部实现</h3><ol><li>Helm客户端使用Go编程语言编写，并使用gRPC协议与Tiller服务器进行交互。</li><li>Tiller服务端也是用Go编写的。它提供了一个与客户端连接的gRPC服务器，它使用Kubernetes客户端库与Kubernetes进行通信。目前，该库使用REST + JSON。</li><li>Tiller服务器将信息存储在位于Kubernetes内的ConfigMaps中。它不需要自己的数据库。</li></ol><h3 id="release-管理机制"><a class="markdownIt-Anchor" href="#release-管理机制"></a> release 管理机制</h3><p><img src="/media/posts/media/release.png" alt="" /></p><h4 id="创建-release"><a class="markdownIt-Anchor" href="#创建-release"></a> 创建 release</h4><ul><li>helm 客户端从指定的目录或本地 tar 文件或远程 repo 仓库解析出 chart 的结构信息</li><li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li><li>Tiller 服务端根据 chart 和 values 生成一个 release</li><li>Tiller 将 install release 请求直接传递给 kube-apiserver</li></ul><h4 id="更新-release"><a class="markdownIt-Anchor" href="#更新-release"></a> 更新 release</h4><ul><li>helm 客户端将需要更新的 chart 的 release 名称 chart 结构和 value 信息传给 Tiller</li><li>Tiller 将收到的信息生成新的 release，并同时更新这个 release 的 history</li><li>Tiller 将新的 release 传递给 kube-apiserver 进行更新</li></ul><h4 id="删除-release"><a class="markdownIt-Anchor" href="#删除-release"></a> 删除 release</h4><ul><li>helm 客户端从指定的目录或本地 tar 文件或远程 repo 仓库解析出 chart 的结构信息</li><li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li><li>Tiller 服务端根据 chart 和 values 生成一个 release</li><li>Tiller 将 delete release 请求直接传递给 kube-apiserver</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes的巨大成功创造了一个工具生态系统，可以简化应用程序开发和部署的复杂性。而该系列文章主要分享helm在噼里啪技术团队的生产实践经验总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Container Cloud" scheme="https://blog.shichanson.site/categories/Container-Cloud/"/>
    
    
      <category term="helm" scheme="https://blog.shichanson.site/tags/helm/"/>
    
  </entry>
  
  <entry>
    <title>创世纪</title>
    <link href="https://blog.shichanson.site/2018/11/22/%E5%88%9B%E4%B8%96%E7%BA%AA/"/>
    <id>https://blog.shichanson.site/2018/11/22/%E5%88%9B%E4%B8%96%E7%BA%AA/</id>
    <published>2018-11-22T07:14:21.000Z</published>
    <updated>2018-11-22T07:14:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>开博客啦！ 这是我的个人博客，将在这里分享我的成长路上学习心得和收获。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开博客啦！ 这是我的个人博客，将在这里分享我的成长路上学习心得和收获。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Story" scheme="https://blog.shichanson.site/categories/Story/"/>
    
    
      <category term="story" scheme="https://blog.shichanson.site/tags/story/"/>
    
  </entry>
  
</feed>
